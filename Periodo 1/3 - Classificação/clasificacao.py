# -*- coding: utf-8 -*-
"""clasificacao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KZwfYXuwngpKKGsUpCrNVgevdOlvGzPg
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, ConfusionMatrixDisplay
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

uploaded = files.upload()

df = pd.read_csv("adult.csv")
df.head()

df.columns = df.columns.str.strip()
df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)

print(df.isnull().sum())

df = df.dropna()

df_encoded = pd.get_dummies(df.drop('income', axis=1))

le = LabelEncoder()
y = le.fit_transform(df['income'])

X_train, X_test, y_train, y_test = train_test_split(df_encoded, y, test_size=0.2, random_state=42)

dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)
y_pred_dt = dt_model.predict(X_test)

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

def avaliar_modelo(nome, y_true, y_pred):
    print(f'\nAvaliação do modelo: {nome}')
    print(f"Acurácia:  {accuracy_score(y_true, y_pred):.2f}")
    print(f"Precisão:  {precision_score(y_true, y_pred):.2f}")
    print(f"Recall:    {recall_score(y_true, y_pred):.2f}")
    print(f"F1-score:  {f1_score(y_true, y_pred):.2f}")
    cm = confusion_matrix(y_true, y_pred)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)
    disp.plot(cmap='Blues')
    plt.title(f'Matriz de Confusão - {nome}')
    plt.show()

avaliar_modelo('Árvore de Decisão', y_test, y_pred_dt)
avaliar_modelo('Random Forest', y_test, y_pred_rf)

importances = rf_model.feature_importances_
features = X_train.columns

plt.figure(figsize=(12, 12))
sns.barplot(x=importances, y=features)
plt.title('Importância dos Atributos - Random Forest')
plt.tight_layout()
plt.show()